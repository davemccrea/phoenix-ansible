- name: Deploy application
  hosts: all
  become: true
  remote_user: "{{ user }}"

  vars:
    caddy_config_path: "/etc/caddy/Caddyfile"
    app_service_file: "/etc/systemd/system/{{ project_name }}.service"
    app_tarball: "{{ tarballs_dir }}/{{ project_name }}-{{ vsn }}.tar.gz"

  pre_tasks:
    - name: Extract version number from mix.exs
      command: "grep -Po '(?<=version: \")[^\"]+' {{ repo_dir }}/mix.exs"
      register: temp_var
      delegate_to: localhost
      changed_when: false

    - name: Assign vsn
      set_fact:
        vsn: "{{ temp_var.stdout }}"

    - name: Ensure Caddy is started
      service:
        name: caddy
        state: started

  tasks:
    - name: Create maintenance directory
      file:
        path: "{{ maintenance_dir }}"
        state: directory

    - name: Create tarballs directory
      file:
        path: "{{ tarballs_dir }}"
        state: directory

    - name: Copy index.html
      template:
        src: templates/maintenance/index.html.j2
        dest: "{{ maintenance_dir }}/index.html"

    - name: Copy Caddyfile
      template:
        src: templates/Caddyfile.j2
        dest: "{{ caddy_config_path }}"
      register: caddyfile

    - name: Reload Caddy
      service:
        name: caddy
        state: reloaded
      when: caddyfile.changed

    - name: Copy unit file
      template:
        src: templates/app.service.j2
        dest: "{{ app_service_file }}"
      register: unit_file

    - name: Reload systemd daemon
      command: systemctl daemon-reload
      when: unit_file.changed

    - name: Run mix release
      shell: |
        cd {{ repo_dir }} && \
        mix deps.get --only prod && \
        MIX_ENV=prod mix do compile, assets.deploy, release
      become_user: "{{ user }}"
      delegate_to: localhost
      args:
        creates: "{{ repo_dir }}/_build/prod/{{ project_name }}-{{ vsn }}.tar.gz"

    - name: Copy app tarball to server
      copy:
        src: "{{ repo_dir }}/_build/prod/{{ project_name }}-{{ vsn }}.tar.gz"
        dest: "{{ app_tarball }}"

    - name: Wait for port to close active connections
      wait_for:
        host: 0.0.0.0
        port: "{{ port }}"
        state: drained

    # Downtime starts here!
    - name: Stop app service
      service:
        name: "{{ project_name }}"
        state: stopped

    - name: Remove app directory
      file:
        path: "{{ app_dir }}"
        state: absent

    - name: Create app directory
      file:
        path: "{{ app_dir }}"
        state: directory

    - name: Extract the release
      unarchive:
        src: "{{ app_tarball }}"
        dest: "{{ app_dir }}"
        remote_src: true

    - name: Copy env file
      template:
        src: templates/.env.j2
        dest: "{{ env_file }}"

    - name: Perform database migrations
      shell:
        cmd: "env $(grep -v '^#' {{ env_file }} | xargs) {{ app_dir }}/bin/migrate"

    - name: Start app service
      service:
        name: "{{ project_name }}"
        daemon_reload: true
        state: started
    # Downtime ends here!
