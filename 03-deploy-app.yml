- name: Deploy app
  hosts: all
  become: true
  remote_user: "{{ user }}"

  handlers:
    - name: Reload Caddy
      service:
        name: caddy
        state: reloaded

  tasks:
    - name: Add repo
      community.general.copr:
        name: '@caddy/caddy'
        state: enabled

    - name: Install Caddy
      dnf:
        update_cache: true
        name: caddy
        state: latest

    - name: Start and enable Caddy
      service:
        name: caddy
        state: started
        enabled: true

    - name: Check maintenance directory exists
      file:
        path: "{{ maintenance_dir }}"
        state: directory

    - name: Copy index.html
      template:
        src: templates/maintenance/index.html.j2
        dest: "{{ maintenance_dir }}/index.html"

    - name: Copy Caddyfile
      template:
        src: templates/Caddyfile.j2
        dest: /etc/caddy/Caddyfile
      notify: Reload Caddy

    - name: Run mix release
      shell: |
        cd {{ repo_dir }} && \
        mix deps.get --only prod && \
        MIX_ENV=prod mix compile && \
        MIX_ENV=prod mix assets.deploy && \
        MIX_ENV=prod mix release
      become_user: "{{ user }}"
      delegate_to: localhost

    - name: Extract version number from mix.exs
      shell:
        cmd: "grep -Po '(?<=version: \")[^\"]+' {{ repo_dir }}/mix.exs"
      register: temp_var
      delegate_to: localhost

    - name: Assign vsn
      set_fact:
         vsn: "{{ temp_var.stdout }}"

    - name: Copy systemd service file
      template:
        src: templates/app.service.j2
        dest: /etc/systemd/system/{{ project_name }}.service

    - name: Create tarballs directory
      file:
        path: "{{ tarballs_dir }}"
        state: directory

    - name: Copy app to server
      copy:
        src: "{{ repo_dir }}/_build/prod/{{ project_name }}-{{ vsn }}.tar.gz"
        dest: "{{ tarballs_dir }}/{{ project_name }}-{{ vsn }}.tar.gz"

    - name: Stop app service
      service:
        name: "{{ project_name }}"
        state: stopped

    - name: Remove app directory
      file:
        path: "{{ app_dir }}"
        state: absent

    - name: Create app directory
      file:
        path: "{{ app_dir }}"
        state: directory

    - name: Extract the release
      unarchive:
        src: "{{ tarballs_dir }}/{{ project_name }}-{{ vsn }}.tar.gz"
        dest: "{{ app_dir }}"
        remote_src: true

    - name: Start app service
      service:
        name: "{{ project_name }}"
        daemon_reload: true # Important
        state: started

    - name: Migrate database
      shell:
        cmd: "SECRET_KEY_BASE={{ secret_key_base }} DATABASE_URL={{ database_url }} {{ app_dir }}/bin/migrate"
